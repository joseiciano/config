{
  "Newline Print to Console": {
    "prefix": "sout",
    "body": ["System.out.println(\"$1\");\n"],
    "description": "Print to the console, newline"
  },
  "Printf to Console": {
    "prefix": "soutf",
    "body": ["System.out.printf(\"$1\");\n"],
    "description": "Print to the console, printf"
  },
  "Print to Console": {
    "prefix": "soutnn",
    "body": ["System.out.print(\"$1\");\n"],
    "description": "Print to the console, no newline"
  },
  "Public static void main throws Exception": {
    "prefix": ["mnexc", "mainexc"],
    "body": ["public static void main(String[] args) throws Exception {", "\t$0", "}"],
    "description": "main throws Exception"
  },
  "Edge": {
    "prefix": ["vertex-class", "vrtx"],
    "body": [
      "class edge implements Comparable<edge>{",
      "\tint loc; // current source",
      "\tint w; // weight\n",
      "\tpublic pair(int ll, int ww) {",
      "\t\tloc = ll;",
      "\t\tw = ww;",
      "\t}",
      "\tpublic int compareTo(edge e) {",
      "\t\treturn w - e.w;",
      "}",
      "\tpublic String toString() {",
      "\t\t\"(\" + loc + \" : \" + w + \")\";",
      "}\n"
    ],
    "description": "edge class"
  },
  "Pair Comparable": {
    "prefix": ["tuple"],
    "body": [
      "class pair extends Comparable<pair> {",
      "\t${1} ${2}",
      "\t${3} ${4}\n",
      "\tpublic pair(${1} xx, ${3} yy) {",
      "\t\tthis.${2}=xx;",
      "\t\tthis.${4}=yy;",
      "\t}\n",
      "\tpublic int compareTo(pair p) {",
      "\t\treturn -1;",
      "\t}",
      "}\n"
    ],
    "description": "Pair class"
  },
  "FastScanner": {
    "prefix": ["fstscn"],
    "body": [
      "class FastScanner {\n",
      "\tBufferedReader br;",
      "\tStringTokenizer st;\n",
      "\tpublic FastScanner(String file) throws Exception {",
      "\t\tbr = new BufferedReader(new BufferedReader(new FileReader(file)));",
      "\t}\n",
      "\tpublic FastScanner() {",
      "\t\tbr = new BufferedReader(new InputStreamReader(System.in));",
      "\t}\n",
      "\tString next() {",
      "\t\twhile (st == null || !st.hasMoreElements()) {",
      "\t\t\ttry {",
      "\t\t\t\tst = new StringTokenizer(br.readLine());",
      "\t\t\t} catch (IOException e) {",
      "\t\t\t\te.printStackTrace();",
      "\t\t\t}",
      "\t\t}",
      "\t\treturn st.nextToken();",
      "\t}\n",
      "\tint nextInt() {",
      "\t\treturn Integer.parseInt(next());",
      "\t}\n",
      "\tlong nextLong() {",
      "\t\treturn Long.parseLong(next());",
      "\t}\n",
      "\tdouble nextDouble() {",
      "\t\treturn Double.parseDouble(next());",
      "\t}\n",
      "\tString nextLine() {",
      "\t\tString str = \"\";",
      "\t\ttry {",
      "\t\t\tstr = br.readLine();",
      "\t\t} catch (IOException e) {",
      "\t\t\te.printStackTrace();",
      "\t\t}",
      "\t\treturn str;",
      "\t}",
      "}\n"
    ],
    "description": "Old Fast Scanner for Input"
  },
  "Default Import Statements": {
    "prefix": ["utiliowildstar"],
    "body": ["import java.util.*;", "import java.io.*;\n"],
    "description": "Wildstar imports java util and java io"
  },
  "Scanner Next Integer": {
    "prefix": ["nxtint"],
    "body": ["in.nextInt()"],
    "description": "Scanner next int"
  },
  "Scanner Next String": {
    "prefix": ["nxtstr"],
    "body": ["in.next()"],
    "description": "Scanner next string"
  },
  "Scanner Next Long": {
    "prefix": ["nxtll", "nxtlong"],
    "body": ["in.nextLong()"],
    "description": "Scanner next long"
  },
  "Scanner Next Double": {
    "prefix": ["nxtzdbl", "nxtzdouble"],
    "body": ["in.nextDouble()"],
    "description": "Scanner next double"
  },
  "Scanner Next Array": {
    "prefix": ["nxtzarr", "nxtzarray"],
    "body": ["in.nextArray($1)"],
    "description": "Scanner read in an int array"
  },
  "Arrays to String": {
    "prefix": ["atostring"],
    "body": ["Arrays.toString(${1})"],
    "description": "Arrays to String"
  },
  "Competitive Programming Template": {
    "prefix": "utilio",
    "body": [
      "/*",
      "    ID: icianoj1,",
      "    LANG: JAVA,",
      "    PROB: $TM_FILENAME_BASE",
      "*/",
      "import java.util.*;",
      "import java.io.*;",
      "",
      "public class reversort {",
      "    static class FastScanner {",
      "        BufferedReader br;",
      "        StringTokenizer st;",
      "",
      "        public FastScanner(String file) throws Exception {",
      "            br = new BufferedReader(new BufferedReader(new FileReader(file)));",
      "        }",
      "",
      "        public FastScanner() {",
      "            br = new BufferedReader(new InputStreamReader(System.in));",
      "        }",
      "",
      "        String next() {",
      "            while (st == null || !st.hasMoreElements()) {",
      "                try {",
      "                    st = new StringTokenizer(br.readLine());",
      "                } catch (IOException e) {",
      "                    e.printStackTrace();",
      "                }",
      "            }",
      "            return st.nextToken();",
      "        }",
      "",
      "        int nextInt() {",
      "            return Integer.parseInt(next());",
      "        }",
      "",
      "        long nextLong() {",
      "            return Long.parseLong(next());",
      "        }",
      "",
      "        double nextDouble() {",
      "            return Double.parseDouble(next());",
      "        }",
      "",
      "        String nextLine() {",
      "            String str = \"\";",
      "            try {",
      "                str = br.readLine();",
      "            } catch (IOException e) {",
      "                e.printStackTrace();",
      "            }",
      "            return str;",
      "        }",
      "",
      "        int[] nextArray(int n) {",
      "            int[] arr = new int[n];",
      "",
      "            for (int i = 0; i < n; i++) {",
      "                arr[i] = nextInt();",
      "            }",
      "",
      "            return arr;",
      "        }",
      "    }",
      "",
      "    static void swap(Object[] arr, int i, int j) {",
      "        Object temp = arr[i];",
      "        arr[i] = arr[j];",
      "        arr[j] = temp;",
      "    }",
      "",
      "    static void reverse(Object[] arr, int s, int e) {",
      "        for (int i = s, j = e; i < j; i++, j--)",
      "            swap(arr, i, j);",
      "    }",
      "",
      "    static final PrintWriter out = new PrintWriter(System.out, true);",
      "    // static final FastScanner in = new FastScanner(reversort.txt);",
      "    static final int oo = (int) 1e9;",
      "    static final int MOD = (int) 1e9 + 7;",
      "    static final FastScanner in = new FastScanner();",
      "",
      "    public static void main(String[] args) throws Exception {",
      "        int te = in.nextInt();",
      "",
      "        for (int tt = 1; tt <= te; tt++) {",
      "            // out.print(\"Case #\" + tt + \": \");",
      "            solve();",
      "        }",
      "    }",
      "",
      "    static void solve() throws Exception {",
      "",
      "    }",
      "}"
    ],
    "description": "Competitive Programming Template"
  }
}
