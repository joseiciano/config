{
  "Newline Print to Console": {
    "prefix": "sout",
    "body": ["System.out.println(\"$1\");\n"],
    "description": "Print to the console, newline"
  },
  "Printf to Console": {
    "prefix": "soutf",
    "body": ["System.out.printf(\"$1\");\n"],
    "description": "Print to the console, printf"
  },
  "Print to Console": {
    "prefix": "soutnn",
    "body": ["System.out.print(\"$1\");\n"],
    "description": "Print to the console, no newline"
  },
  "USACO Template": {
    "prefix": "usaco",
    "body": ["/*", "ID: icianoj1", "LANG: JAVA", "PROB: $TM_FILENAME_BASE", "*/\n\n"]
  },
  "For-Loop, i to j": {
    "prefix": ["fori"],
    "body": ["for (int ${1} = ${2}; ${1} < ${3}; ${1}++) {", "\t$0", "}\n"],
    "description": "Regular for loop"
  },
  "For-Loop, reversed, i to j": {
    "prefix": ["revfor"],
    "body": ["for (int ${1} = ${2}; ${1} > ${3}; ${1}--) {", "\t$0", "}\n"],
    "description": "Reverse for loop"
  },
  "Public static void main throws Exception": {
    "prefix": ["mnexc", "mainexc"],
    "body": ["public static void main(String[] args) throws Exception {", "\t$0", "}"],
    "description": "main throws Exception"
  },
  "Edge": {
    "prefix": ["vertex-class", "vrtx"],
    "body": [
      "class edge implements Comparable<edge>{",
      "\tint loc; // current source",
      "\tint w; // weight\n",
      "\tpublic pair(int ll, int ww) {",
      "\t\tloc = ll;",
      "\t\tw = ww;",
      "\t}",
      "\tpublic int compareTo(edge e) {",
      "\t\treturn w - e.w;",
      "}",
      "\tpublic String toString() {",
      "\t\t\"(\" + loc + \" : \" + w + \")\";",
      "}\n"
    ],
    "description": "edge class"
  },
  "Pair Comparable": {
    "prefix": ["tuple"],
    "body": [
      "class pair extends Comparable<pair> {",
      "\t${1} ${2}",
      "\t${3} ${4}\n",
      "\tpublic pair(${1} xx, ${3} yy) {",
      "\t\tthis.${2}=xx;",
      "\t\tthis.${4}=yy;",
      "\t}\n",
      "\tpublic int compareTo(pair p) {",
      "\t\treturn -1;",
      "\t}",
      "}\n"
    ],
    "description": "Pair class"
  },
  "FastScanner": {
    "prefix": ["fstscn"],
    "body": [
      "class FastScanner {\n",
      "\tBufferedReader br;",
      "\tStringTokenizer st;\n",
      "\tpublic FastScanner(String file) throws Exception {",
      "\t\tbr = new BufferedReader(new BufferedReader(new FileReader(file)));",
      "\t}\n",
      "\tpublic FastScanner() {",
      "\t\tbr = new BufferedReader(new InputStreamReader(System.in));",
      "\t}\n",
      "\tString next() {",
      "\t\twhile (st == null || !st.hasMoreElements()) {",
      "\t\t\ttry {",
      "\t\t\t\tst = new StringTokenizer(br.readLine());",
      "\t\t\t} catch (IOException e) {",
      "\t\t\t\te.printStackTrace();",
      "\t\t\t}",
      "\t\t}",
      "\t\treturn st.nextToken();",
      "\t}\n",
      "\tint nextInt() {",
      "\t\treturn Integer.parseInt(next());",
      "\t}\n",
      "\tlong nextLong() {",
      "\t\treturn Long.parseLong(next());",
      "\t}\n",
      "\tdouble nextDouble() {",
      "\t\treturn Double.parseDouble(next());",
      "\t}\n",
      "\tString nextLine() {",
      "\t\tString str = \"\";",
      "\t\ttry {",
      "\t\t\tstr = br.readLine();",
      "\t\t} catch (IOException e) {",
      "\t\t\te.printStackTrace();",
      "\t\t}",
      "\t\treturn str;",
      "\t}",
      "}\n"
    ],
    "description": "Old Fast Scanner for Input"
  },
  "Default Import Statements": {
    "prefix": ["utiliowildstar"],
    "body": ["import java.util.*;", "import java.io.*;\n"],
    "description": "Wildstar imports java util and java io"
  },
  "Scanner Next Integer": {
    "prefix": ["nxtint"],
    "body": ["in.nextInt()"],
    "description": "Scanner next int"
  },
  "Scanner Next String": {
    "prefix": ["nxtstr"],
    "body": ["in.next()"],
    "description": "Scanner next string"
  },
  "Scanner Next Long": {
    "prefix": ["nxtll", "nxtlong"],
    "body": ["in.nextLong()"],
    "description": "Scanner next long"
  },
  "Scanner Next Double": {
    "prefix": ["nxtzdbl", "nxtzdouble"],
    "body": ["in.nextDouble()"],
    "description": "Scanner next double"
  },
  "Arrays to String": {
    "prefix": ["atostring"],
    "body": ["Arrays.toString(${1})"],
    "description": "Arrays to String"
  },
  "Competitive Programming Template": {
    "prefix": "utilio",
    "body": [
      "import java.util.*;\r",
      "import java.io.*;\r",
      "\r",
      "public class $TM_FILENAME_BASE {\r",
      "  static class FastScanner {\r",
      "    BufferedReader br;\r",
      "    StringTokenizer st;\r",
      "\r",
      "    public FastScanner(String file) throws Exception {\r",
      "      br = new BufferedReader(new BufferedReader(new FileReader(file)));\r",
      "    }\r",
      "\r",
      "    public FastScanner() {\r",
      "      br = new BufferedReader(new InputStreamReader(System.in));\r",
      "    }\r",
      "\r",
      "    String next() {\r",
      "      while (st == null || !st.hasMoreElements()) {\r",
      "        try {\r",
      "          st = new StringTokenizer(br.readLine());\r",
      "        } catch (IOException e) {\r",
      "          e.printStackTrace();\r",
      "        }\r",
      "      }\r",
      "      return st.nextToken();\r",
      "    }\r",
      "\r",
      "    int nextInt() {\r",
      "      return Integer.parseInt(next());\r",
      "    }\r",
      "\r",
      "    long nextLong() {\r",
      "      return Long.parseLong(next());\r",
      "    }\r",
      "\r",
      "    double nextDouble() {\r",
      "      return Double.parseDouble(next());\r",
      "    }\r",
      "\r",
      "    String nextLine() {\r",
      "      String str = \"\";\r",
      "      try {\r",
      "        str = br.readLine();\r",
      "      } catch (IOException e) {\r",
      "        e.printStackTrace();\r",
      "      }\r",
      "      return str;\r",
      "    }\r",
      "  }\r",
      "\r",
      "  static final PrintWriter out = new PrintWriter(System.out, true);\r",
      "  // static final FastScanner in = new FastScanner($TM_FILENAME_BASE.txt);\r",
      "  static final int oo = (int) 1e9;\r",
      "  static final int MOD = (int) 1e9 + 7;\r",
      "  static final FastScanner in = new FastScanner();\r",
      "\r",
      "  public static void main(String[] args) throws Exception {\r",
      "    int te = in.nextInt();\r",
      "\r",
      "    for (int t = 1; t <= te; t++) {\r",
      "      solve();\r",
      "    }\r",
      "  }\r",
      "\r",
      "  static void solve() throws Exception {\r",
      "\r",
      "  }\r",
      "}"
    ],
    "description": "Competitive Programming Template"
  }
}
