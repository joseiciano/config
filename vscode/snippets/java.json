{
  // Place your snippets for java here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Newline Print to Console": {
    "prefix": "sysln",
    "body": ["System.out.println(\"$1\");"],
    "description": "Print to the console, newline"
  },
  "Printf to Console": {
    "prefix": "sysf",
    "body": ["System.out.printf(\"$1\");"],
    "description": "Print to the console, printf"
  },
  "Print to Console": {
    "prefix": "sysnn",
    "body": ["System.out.print(\"$1\");"],
    "description": "Print to the console, no nrelinr"
  },
  "USACO Template": {
    "prefix": "usaco",
    "body": ["/*", "ID: icianoj1", "LANG: JAVA", "PROB: ${1}", "*/"]
  },
  "For-Loop, iterable": {
    "prefix": ["foreach"],
    "body": ["for (${1} ${2} : ${3}) {", "\t$0", "}"],
    "description": "For-each loop"
  },
  "For-Loop, i to j inclusive, i++": {
    "prefix": ["fori-++-incl"],
    "body": ["for (int ${1} = ${2}; ${1} <= ${3}; ${1}++) {", "\t$0", "}"],
    "description": "For-each loop"
  },
  "For-Loop, i to j non-inclusive, i++": {
    "prefix": ["fori"],
    "body": ["for (int ${1} = ${2}; ${1} < ${3}; ${1}++) {", "\t$0", "}"],
    "description": "For-each loop"
  },
  "For-Loop, i to j inclusive, i--": {
    "prefix": ["fori----incl"],
    "body": ["for (int ${1} = ${2}; ${1} >= ${3}; ${1}--) {", "\t$0", "}"],
    "description": "For-each loop"
  },
  "For-Loop, i to j non-inclusive, i--": {
    "prefix": ["fori--"],
    "body": ["for (int ${1} = ${2}; ${1} > ${3}; ${1}--) {", "\t$0", "}"],
    "description": "For-each loop"
  },
  "Public static void main throws Exception": {
    "prefix": ["mnexc"],
    "body": ["public static void main(String[] args) throws Exception {", "\t$0", "}"],
    "description": "main throws Exception"
  },
  "Arraydeque": {
    "prefix": ["deque"],
    "body": "ArrayDeque<${1}> ${2} = new ArrayDeque<>();",
    "description": "Arraydeque"
  },
  "PriorityQueue": {
    "prefix": ["priorityq"],
    "body": "PriorityQueue<${1}> ${2} = new PriorityQueue<>();",
    "description": "Priorityqueue"
  },
  "ArrayList": {
    "prefix": ["alist", "lst"],
    "body": "List<${1}> ${2} = new ArrayList<>();",
    "description": "ArrayList"
  },
  "LinkedList": {
    "prefix": ["llist", "llst", "linklist"],
    "body": "LinkedList<${1}> $2 = new LinkedList<>();",
    "description": "LinkedList"
  },
  "HashMap": {
    "prefix": ["hshmp", "hshmap"],
    "body": "Map<${1}, ${2}} ${3} = new HashMap<>();",
    "description": "HashMap"
  },
  "TreeMap": {
    "prefix": ["treemp", "trmp"],
    "body": "TreeMap<${1}, ${2}> ${3} = new TreeMap<>();",
    "description": "TreeMap"
  },
  "HashSet": {
    "prefix": ["hshset", "hshst"],
    "body": "Set<${1}> ${2} = new HashSet<>();",
    "description": "HashSet"
  },
  "TreeSet": {
    "prefix": ["trset", "trst"],
    "body": "TreeSet<${1}> ${2} = new TreeSet<>();",
    "description": "TreeSet"
  },
  "Edge": {
    "prefix": ["vertex-class", "vrtx"],
    "body": [
      "class edge implements Comparable<edge>{",
      "\tint loc; // current source",
      "\tint w; // weight\n",
      "\tpublic pair(int ll, int ww) {",
      "\t\tloc = ll;",
      "\t\tw = ww;",
      "\t}",

      "\tpublic int compareTo(edge e) {",
      "\t\treturn w - e.w;",
      "}",

      "\tpublic String toString() {",
      "\t\t\"(\" + loc + \" : \" + w + \")\";",
      "}"
    ],
    "description": "Pair class"
  },
  "Pair": {
    "prefix": ["pair"],
    "body": [
      "class pair {",
      "\t${1} ${2}",
      "\t${3} ${4}\n",
      "\tpublic pair(${1} xx, ${3} yy) {",
      "\t\tthis.${2}=xx;",
      "\t\tthis.${4}=yy;",
      "\t}",
      "}"
    ],
    "description": "Pair class"
  },
  "Pair Comparable": {
    "prefix": ["paircomp", "paircmp"],
    "body": [
      "class pair extends Comparable<pair> {",
      "\t${1} ${2}",
      "\t${3} ${4}\n",
      "\tpublic pair(${1} xx, ${3} yy) {",
      "\t\tthis.${2}=xx;",
      "\t\tthis.${4}=yy;",
      "\t}\n",
      "\tpublic int compareTo(pair p) {",
      "\t\treturn ${5};",
      "\t}",
      "}"
    ],
    "description": "Pair class"
  },
  "Object Comparable": {
    "prefix": ["objcomp", "clsscmp", "classcomp", "classcmp"],
    "body": [
      "class ${1} extends Comparable<${1}> {",
      "\n",
      "\tpublic int compareTo(${1} p) {",
      "\t\treturn ${2};",
      "\t}",
      "}"
    ],
    "description": "Comparable Object class"
  },
  "Object": {
    "prefix": ["clss"],
    "body": ["class ${1} {", "\n", "}"],
    "description": "Object class"
  },
  "Scanner input file": {
    "prefix": ["scnfile"],
    "body": ["Scanner in = new Scanner(new File(${1}));"],
    "description": "Scanner for file input"
  },
  "Scanner input": {
    "prefix": ["scnusr"],
    "body": ["Scanner in = new Scanner(System.in);"],
    "description": "Scanner for user input"
  },
  "FastScanner": {
    "prefix": ["fstscn"],
    "body": [
      "class FastScanner {\n",
      "\tBufferedReader br;",
      "\tStringTokenizer st;\n",
      "\tpublic FastScanner(String file) throws Exception {",
      "\t\tbr = new BufferedReader(new BufferedReader(new FileReader(file)));",
      "\t}\n",
      "\tpublic FastScanner() {",
      "\t\tbr = new BufferedReader(new InputStreamReader(System.in));",
      "\t}\n",
      "\tString next() {",
      "\t\twhile (st == null || !st.hasMoreElements()) {",
      "\t\t\ttry {",
      "\t\t\t\tst = new StringTokenizer(br.readLine());",
      "\t\t\t} catch (IOException e) {",
      "\t\t\t\te.printStackTrace();",
      "\t\t\t}",
      "\t\t}",
      "\t\treturn st.nextToken();",
      "\t}\n",
      "\tint nextInt() {",
      "\t\treturn Integer.parseInt(next());",
      "\t}\n",
      "\tlong nextLong() {",
      "\t\treturn Long.parseLong(next());",
      "\t}\n",
      "\tdouble nextDouble() {",
      "\t\treturn Double.parseDouble(next());",
      "\t}\n",
      "\tString nextLine() {",
      "\t\tString str = \"\";",
      "\t\ttry {",
      "\t\t\tstr = br.readLine();",
      "\t\t} catch (IOException e) {",
      "\t\t\te.printStackTrace();",
      "\t\t}",
      "\t\treturn str;",
      "\t}",
      "}\n"
    ],
    "description": "Fast Scanner for Input"
  },
  "Default Import Statements": {
    "prefix": ["utilio"],
    "body": ["import java.util.*;", "import java.io.*;\n"],
    "description": "Wildstar imports java util and java io"
  },
  "Scanner Next Integer": {
    "prefix": ["nxtint"],
    "body": ["in.nextInt();"],
    "description": "Scanner next int"
  },
  "Scanner Next String": {
    "prefix": ["nxtstr"],
    "body": ["in.next();"],
    "description": "Scanner next string"
  },
  "Scanner Next Long": {
    "prefix": ["nxtll", "nxtlong"],
    "body": ["in.nextLong();"],
    "description": "Scanner next long"
  },
  "Scanner Next Double": {
    "prefix": ["nxtdbl", "nxtdouble"],
    "body": ["in.nextDouble();"],
    "description": "Scanner next double"
  },
  "Arrays to String": {
    "prefix": ["atostring"],
    "body": ["Arrays.toString(${1})"],
    "description": "Arrays to String"
  },
  "PrintWriter System Out": {
    "prefix": ["PW SysOut"],
    "body": ["PrintWriter out = new PrintWriter(System.out, true);"],
    "description": "Printwriter System.Out"
  }
}
